#!/bin/bash

#custom error code
#4 - file not found
#5 - no permissions to create directory
#6 - error with LASTZ gapped extension
#7 - unable to open file
#9 - not enopugh allocated CPU DRAM
#10 - Requested GPUs greater than available GPUs
#11 - Error with cudaSetDevice in GPU part
#12 - Error with cudaMalloc in GPU part
#13 - Error with cudaMemcpy in GPU part
#14 - Error with cudaFree in GPU part

set -e

1>&2 echo "====================="

optionalArguments=""
optionalArguments1=""
ng=0
outf=0
output_filename=""
mk=0
hp=0
total_args=0
num_threads=$(nproc)
uid=0
segment_size=0

args=("$@")

for ((i=0; i < $#; i++)){
  new_arg=`echo "${args[$i]}" | sed 's/=/ /'`
  optionalArguments1="$optionalArguments1 $new_arg"
}

split_args=( $optionalArguments1 )
total_args=${#split_args[@]}

for ((i=2; i < $#; i++)){
  if [[ "${args[$i]}" == *"--num_threads"* ]]; then
    i=$(($i+1))
  elif [[ "${args[$i]}" == *"--uid"* ]]; then
    i=$(($i+1))
  elif [[ "${args[$i]}" == *"--segment_size"* ]]; then
    i=$(($i+1))
  else
    optionalArguments="$optionalArguments ${args[$i]}"
  fi
}

1>&2 echo "Optional arguments: $optionalArguments"



for ((i=0; i < $total_args; i++)){
  if [[ "${split_args[$i]}" == *"--nogapped"* ]]; then
    ng=1
  fi

  if [[ "${split_args[$i]}" == *"--output"* ]]; then
    outf=1
    output_filename=$(readlink -f ${split_args[$(($i+1))]})
  fi

  if [[ "${split_args[$i]}" == *"--markend"* ]]; then
    mk=1
  fi

  if [[ "${split_args[$i]}" == *"--help"* ]]; then
    hp=1
  fi

  if [[ "${split_args[$i]}" == *"--num_threads"* ]]; then
    num_threads=${split_args[$(($i+1))]}
  fi

  if [[ "${split_args[$i]}" == *"--uid"* ]]; then
    uid=${split_args[$(($i+1))]}
  fi

  if [[ "${split_args[$i]}" == *"--segment_size"* ]]; then
    segment_size=${split_args[$(($i+1))]}
  fi
}

1>&2 echo "UID path:  $uid"

if [ $hp -eq 1 ]; then
  segalign --help

elif [ $# -eq 1 ] || [ $# -eq 0 ]; then
  segalign $1

else
  refPath=$(readlink -f $1)
  queryPath=$(readlink -f $2)

  if [ ! -f "$refPath" ]; then
    1>&2 echo "target file $refPath does not exist"
    (exit 4)
  fi

  if [ ! -f "$queryPath" ]; then
    1>&2 echo "query file $queryPath does not exist"
    (exit 4)
  fi


  if [ ! -w $PWD ]; then
    1>&2 echo "Cannot create output directory in $PWD because of permissions"
    (exit 5)
  fi

  OUTPUT_FOLDER=$PWD/output_$RANDOM$RANDOM
  mkdir -p $OUTPUT_FOLDER

  if [ ! -w $OUTPUT_FOLDER ]; then
    1>&2 echo "Cannot create data directory in $OUTPUT_FOLDER because of permissions"
    (exit 5)
  fi

  DATA_FOLDER=$OUTPUT_FOLDER/data_$RANDOM$RANDOM/
  mkdir -p $DATA_FOLDER

  if [ $ng -eq 0 ]; then
    cd $DATA_FOLDER
    1>&2 echo ""
    1>&2 echo "Making symlink of 2bit files"
    ln -s ${refPath}.2bit ref.2bit
    ln -s ${queryPath}.2bit query.2bit
  fi

  1>&2 echo ""
  1>&2 echo "Executing: \"segalign $refPath $queryPath $DATA_FOLDER $optionalArguments\""

  pids=""
  FAIL=0
  last_pid=0
  nice=19
  sleep_time="0.2"
  sleep_time_incr=1
  max_sleep_incr=60

  cd $OUTPUT_FOLDER
  1>&2 echo "output folder: $OUTPUT_FOLDER"

  autogroup_enabled=$(cat /proc/sys/kernel/sched_autogroup_enabled)
  1>&2 echo "autogroups enabled: $autogroup_enabled"


  time {
  count=0
  while IFS= read -r line_; do
    while IFS= read -r line; do
      if [ $autogroup_enabled -eq 1 ]; then
        eval "reallynice $nice $line" & last_pid=$!;
        #1>&2 echo "echo $nice > /proc/self/autogroup";
        #echo $nice > /proc/self/autogroup;
        #1>&2 cat /proc/self/autogroup;
        #1>&2 echo "nice: $nice, line: $line"
      else
        eval "nice -n $nice $line" & last_pid=$!;
      fi;

      pids="$pids $last_pid";
      sleep "$sleep_time";
      count=$(ps -x --format=command | grep '[l]astz' | wc -l);
      sleep_time_incr=1;
      while [ $count -ge $num_threads ]; do
        running="";
        for pid in $pids; do
          if ps -p $pid > /dev/null; then
            running="$running $pid";
          fi;
        done;
        sleep $(((count-num_threads+1)*sleep_time_incr));
        if [ $sleep_time_incr -lt $max_sleep_incr ]; then
          sleep_time_incr=$((sleep_time_incr+1));
        fi;
        count=$(ps -x --format=command | grep '[l]astz' | wc -l);
        pids=$running;
      done;
    done < <(stdbuf -oL segalign_sort $segment_size $line_ | stdbuf -oL pv -B 128M -C)
  done < <((stdbuf -oL segalign $refPath $queryPath $DATA_FOLDER $optionalArguments && touch $uid) | stdbuf -oL pv -B 128M -C)  
  #done < <(stdbuf -oL segalign $refPath $queryPath $DATA_FOLDER $optionalArguments; if [ $? -eq 0 ]; then touch $uid; fi | stdbuf -oL mbuffer -m 128M -s 512 -q -v 0)
  wait $pids || let "FAIL+=1"
  }

  rm -rf $DATA_FOLDER

  if [ $count -gt 0 ]; then
    if [ $ng -eq 0 ]; then

      if [ $(ls *.err | wc -l) -gt 0 ]; then
        err_lines=$(grep FAILURE *.err | wc -l)

        if [ $err_lines -gt 0 ] || [ $FAIL -gt 0 ]; then
          1>&2 echo ""
          1>&2 echo "Error in LASTZ process!"
          1>&2 cat *.err
          (exit 6)
        fi

        for i in *.err;
        do
          rm $i;
        done
      fi

      if [ $(ls *.segments | wc -l) -gt 0 ]; then
        du -ba *.segments > segment_sizes.txt
        for i in *.segments;
        do
          rm $i;
        done
      fi
    fi


    if [ $outf -eq 1 ]; then

      > $output_filename

      if [ $(ls tmp*.plus.* | wc -l) -gt 0 ]; then
        for filename in `for i in tmp*.plus.*; do echo $i; done | sort -V`;
        do
          cat $filename >> $output_filename && rm $filename;
        done
      fi

      if [ $(ls tmp*.minus.* | wc -l) -gt 0 ]; then
        for filename in `for i in tmp*.minus.*; do echo $i; done | sort -V`;
        do
          cat $filename >> $output_filename && rm $filename;
        done
      fi

      if [ $mk -eq 1 ]; then
        echo "# segalign end-of-file" >> $output_filename
      fi

    else

      if [ $(ls tmp*.plus.* | wc -l) -gt 0 ]; then
        for filename in `for i in tmp*.plus.*; do echo $i; done | sort -V`;
        do
          cat $filename && rm $filename;
        done
      fi

      if [ $(ls tmp*.minus.* | wc -l) -gt 0 ]; then
        for filename in `for i in tmp*.minus.*; do echo $i; done | sort -V`;
        do
          cat $filename && rm $filename;
        done
      fi

      if [ $mk -eq 1 ]; then
        echo "# segalign end-of-file"
      fi

    fi
  else
    echo "No alignment generated"
  fi

  rm -rf $OUTPUT_FOLDER
fi
